{
  "actions": [],
  "alias_purpose": "detection_rule",
  "author": [
    "Google Gemini 2.0 Flash 001",
    "Teoderick Contreras, Splunk"
  ],
  "building_block_type": "default",
  "description": "Google Gemini 2.0 Flash 001: The following analytic detects the creation or enabling of services on\nLinux platforms using the systemctl or service tools. It leverages Endpoint Detection\nand Response (EDR) logs, focusing on process names, parent processes, and command-line\nexecutions. This activity is significant as adversaries may create or modify services\nto maintain persistence or execute malicious payloads. If confirmed malicious, this\nbehavior could lead to persistent access, data theft, ransomware deployment, or\nother damaging outcomes. Monitoring and investigating such activities are crucial\nfor maintaining the security and integrity of the environment. Rule was converted with Google Gemini 2.0 Flash 001",
  "enabled": true,
  "false_positives": [
    "Administrator or network operator can use this commandline for automation purposes. Please update the filter macros to remove false positives."
  ],
  "from": "now-60m",
  "interval": "5m",
  "license": "Elastic License v2",
  "max_signals": 100,
  "name": "Google Gemini 2.0 Flash 001: Linux Service Started Or Enabled",
  "note": "The detection is based on data that originates from Endpoint Detection\n  and Response (EDR) agents. These agents are designed to provide security-related\n  telemetry from the endpoints where the agent is installed. To implement this search,\n  you must ingest logs that contain the process GUID, process name, and parent process.\n  Additionally, you must ingest complete command-line executions. These logs must\n  be processed using the appropriate Splunk Technology Add-ons that are specific to\n  the EDR product. The logs must also be mapped to the `Processes` node of the `Endpoint`\n  data model. Use the Splunk Common Information Model (CIM) to normalize the field\n  names and speed up the data modeling process.",
  "output_index": ".siem-signals-default",
  "references": [
    "https://attack.mitre.org/techniques/T1543/003/"
  ],
  "risk_score": 42,
  "rule_id": "linux_service_started_or_enabled",
  "severity": "medium",
  "tags": [
    "Google Gemini 2.0 Flash 001",
    "Linux Privilege Escalation",
    "Linux Persistence Techniques",
    "Linux Living Off The Land",
    "Scheduled Tasks",
    "Gomir",
    "Endpoint",
    "T1053.006",
    "Splunk Enterprise",
    "Splunk Enterprise Security",
    "Splunk Cloud",
    "endpoint"
  ],
  "threat": [
    {
      "framework": "MITRE ATT&CK",
      "tactic": {
        "id": "TA0003",
        "name": "Persistence",
        "reference": "https://attack.mitre.org/tactics/TA0003/"
      },
      "technique": [
        {
          "id": "T1543",
          "name": "Create or Modify System Process",
          "reference": "https://attack.mitre.org/techniques/T1543/",
          "subtechnique": [
            {
              "id": "T1543.003",
              "name": "Linux and Mac Systemd Service",
              "reference": "https://attack.mitre.org/techniques/T1543/003/"
            }
          ]
        }
      ]
    },
    {
      "framework": "MITRE ATT&CK",
      "tactic": {
        "id": "TA0004",
        "name": "Privilege Escalation",
        "reference": "https://attack.mitre.org/tactics/TA0004/"
      },
      "technique": [
        {
          "id": "T1053",
          "name": "Scheduled Task/Job",
          "reference": "https://attack.mitre.org/techniques/T1053/",
          "subtechnique": [
            {
              "id": "T1053.006",
              "name": "Systemd Timers",
              "reference": "https://attack.mitre.org/techniques/T1053/006/"
            }
          ]
        }
      ]
    }
  ],
  "throttle": "no_actions",
  "type": "eql",
  "version": 1,
  "language": "eql",
  "query": "sequence by host.hostname\n  [\n    process where event.category == \"process\" and event.type == \"start\"\n     and process.name in (\"systemctl\", \"service\")\n     and process.args in (\"start\", \"enable\")\n  ]\n  [\n    process where event.category == \"process\" and event.type == \"start\"\n  ]",
  "index": [
    "logs-endpoint.events.*"
  ]
}