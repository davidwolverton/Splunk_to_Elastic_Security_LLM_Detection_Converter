{
  "actions": [],
  "alias_purpose": null,
  "alias_target_id": null,
  "author": [
    "Google Gemini 2.0 Flash 001",
    "Teoderick Contreras, Splunk"
  ],
  "building_block_type": null,
  "description": "Google Gemini 2.0 Flash 001: The following analytic detects the execution of the chmod utility to\nset the SUID or SGID bit on files, which can allow users to temporarily gain root\nor group-level access. This detection leverages data from Linux Auditd, focusing\non process names and command-line arguments related to chmod. This activity is significant\nas it can indicate an attempt to escalate privileges or maintain persistence on\na system. If confirmed malicious, an attacker could gain elevated access, potentially\ncompromising sensitive data or critical system functions.",
  "enabled": true,
  "exceptions_list": [],
  "false_positives": [
    "Administrator or network operator can execute this command. Please update the filter macros to remove false positives."
  ],
  "from": "now-60m",
  "interval": "10m",
  "investigation_fields": {
    "field_names": []
  },
  "license": null,
  "max_signals": 100,
  "meta": {
    "version": 5,
    "data_source": [
      "Linux Auditd Proctitle"
    ],
    "date": "2025-02-20",
    "type": "Anomaly",
    "status": "production",
    "references": [
      "https://www.hackingarticles.in/linux-privilege-escalation-using-capabilities/"
    ],
    "how_to_implement": "To implement this detection, the process begins by ingesting auditd data, that consist SYSCALL, TYPE, EXECVE and PROCTITLE events, which captures command-line executions and process details on Unix/Linux systems. These logs should be ingested and processed using Splunk Add-on for Unix and Linux (https://splunkbase.splunk.com/app/833), which is essential for correctly parsing and categorizing the data. The next step involves normalizing the field names  to match the field names set by the Splunk Common Information Model (CIM) to ensure consistency across different data sources and enhance the efficiency of data modeling. This approach enables effective monitoring and detection of linux endpoints where auditd is deployed"
  },
  "name": "Google Gemini 2.0 Flash 001: Linux Auditd Setuid Using Chmod Utility",
  "namespace": "default",
  "note": "Google Gemini 2.0 Flash 001: Rule converted from Splunk SPL to Elastic EQL.",
  "outcome": null,
  "output_index": ".siem-signals-default",
  "references": [
    "https://www.hackingarticles.in/linux-privilege-escalation-using-capabilities/"
  ],
  "related_integrations": [],
  "required_fields": [
    {
      "name": "process.command_line",
      "type": "string"
    },
    {
      "name": "host.hostname",
      "type": "string"
    }
  ],
  "response_actions": [],
  "risk_score": 47,
  "risk_score_mapping": [],
  "rule_id": "linux_auditd_setuid_using_chmod_utility",
  "rule_name_override": null,
  "setup": null,
  "severity": "high",
  "severity_mapping": [],
  "tags": [
    "Google Gemini 2.0 Flash 001",
    "Linux Living Off The Land",
    "Linux Privilege Escalation",
    "Linux Persistence Techniques",
    "Compromised Linux Host",
    "Endpoint",
    "T1548.001",
    "Splunk Enterprise",
    "Splunk Enterprise Security",
    "Splunk Cloud",
    "endpoint"
  ],
  "threat": [
    {
      "framework": "MITRE ATT&CK",
      "tactic": {
        "id": "TA0004",
        "name": "Privilege Escalation",
        "reference": "https://attack.mitre.org/tactics/TA0004/"
      },
      "technique": [
        {
          "id": "T1548.001",
          "name": "Setuid and Setgid",
          "reference": "https://attack.mitre.org/techniques/T1548/001/",
          "subtechnique": []
        }
      ]
    }
  ],
  "throttle": null,
  "timeline_id": null,
  "timeline_title": null,
  "timestamp_override": null,
  "timestamp_override_fallback_disabled": false,
  "to": "now",
  "version": 1,
  "language": "eql",
  "query": "sequence by host.hostname, process.pid\n  [process where event.category == \"process\" and event.type == \"start\" and process.name == \"chmod\" and process.command_line != null and (\n    wildcard(process.command_line, \"* u+s *\") or\n    wildcard(process.command_line, \"* g+s *\") or\n    wildcard(process.command_line, \"* 4777 *\") or\n    wildcard(process.command_line, \"* 4577 *\")\n  ]\n  [process where event.category == \"process\" and event.type == \"end\"]",
  "type": "eql",
  "alert_suppression": {
    "duration": {
      "unit": "m",
      "value": 5
    },
    "group_by": [],
    "missing_fields_strategy": "do_not_suppress"
  },
  "data_view_id": "default",
  "event_category_override": null,
  "filters": [],
  "index": [
    "auditbeat-*",
    "filebeat-*",
    "logs-endpoint.events.*",
    "logs-system.*"
  ],
  "tiebreaker_field": null,
  "timestamp_field": null
}