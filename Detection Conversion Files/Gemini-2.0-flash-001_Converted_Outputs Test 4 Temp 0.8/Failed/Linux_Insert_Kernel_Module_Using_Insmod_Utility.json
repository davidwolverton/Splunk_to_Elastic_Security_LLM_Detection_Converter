{
  "actions": [],
  "alias_purpose": null,
  "alias_target_id": null,
  "author": [
    "Google Gemini 2.0 Flash 001",
    "Teoderick Contreras, Splunk"
  ],
  "building_block_type": null,
  "description": "Google Gemini 2.0 Flash 001: The following analytic detects the insertion of a Linux kernel module using the insmod utility. It leverages data from Endpoint Detection and Response (EDR) agents, focusing on process execution logs that include process names and command-line details. This activity is significant as it may indicate the installation of a rootkit or malicious kernel module, potentially allowing an attacker to gain elevated privileges and bypass security detections. If confirmed malicious, this could lead to unauthorized code execution, persistent access, and severe compromise of the affected system.",
  "enabled": true,
  "exceptions_list": [],
  "false_positives": [
    "Administrator or network operator can execute this command. Please update the filter macros to remove false positives."
  ],
  "from": "now-60m",
  "interval": "5m",
  "investigation_fields": {
    "field_names": []
  },
  "license": null,
  "max_signals": 100,
  "meta": {
    "version": "6"
  },
  "name": "Google Gemini 2.0 Flash 001: Linux Insert Kernel Module Using Insmod Utility",
  "namespace": "default",
  "note": "Converted with Google Gemini 2.0 Flash 001",
  "outcome": null,
  "output_index": ".siem-signals-default",
  "references": [
    "https://docs.fedoraproject.org/en-US/fedora/rawhide/system-administrators-guide/kernel-module-driver-configuration/Working_with_Kernel_Modules/",
    "https://security.stackexchange.com/questions/175953/how-to-load-a-malicious-lkm-at-startup",
    "https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485"
  ],
  "related_integrations": [],
  "required_fields": [
    {
      "name": "process.name",
      "type": "string"
    },
    {
      "name": "process.command_line",
      "type": "string"
    },
    {
      "name": "host.hostname",
      "type": "string"
    },
    {
      "name": "user.name",
      "type": "string"
    },
    {
      "name": "process.parent.name",
      "type": "string"
    },
    {
      "name": "process.entity_id",
      "type": "string"
    },
    {
      "name": "process.parent.entity_id",
      "type": "string"
    }
  ],
  "response_actions": [],
  "risk_score": 64,
  "risk_score_mapping": [],
  "rule_id": "linux_insert_kernel_module_using_insmod_utility",
  "rule_name_override": null,
  "setup": null,
  "severity": "high",
  "severity_mapping": [],
  "tags": [
    "Google Gemini 2.0 Flash 001",
    "Linux Persistence Techniques",
    "XorDDos",
    "Linux Rootkit",
    "Linux Privilege Escalation",
    "Endpoint",
    "T1547.006"
  ],
  "threat": [
    {
      "framework": "MITRE ATT&CK",
      "tactic": {
        "id": "TA0005",
        "name": "Defense Evasion",
        "reference": "https://attack.mitre.org/tactics/TA0005/"
      },
      "technique": [
        {
          "id": "T1547",
          "name": "Boot or Logon Autostart Execution",
          "reference": "https://attack.mitre.org/techniques/T1547/",
          "subtechnique": [
            {
              "id": "T1547.006",
              "name": "Kernel Modules and Extensions",
              "reference": "https://attack.mitre.org/techniques/T1547/006/"
            }
          ]
        }
      ]
    }
  ],
  "throttle": null,
  "timeline_id": null,
  "timeline_title": null,
  "timestamp_override": null,
  "timestamp_override_fallback_disabled": false,
  "to": "now",
  "version": 1,
  "language": "eql",
  "query": "sequence by host.hostname\n  [\n    process where event.category == \"process\" and process.name in (\"kmod\", \"sudo\") and process.command_line : \"insmod\"\n  ]\n  [\n    process where event.category == \"process\" and process.name : \"insmod\"\n  ]",
  "type": "eql",
  "alert_suppression": {
    "duration": {
      "unit": "m",
      "value": 5
    },
    "group_by": [],
    "missing_fields_strategy": "doNotSuppress"
  },
  "data_view_id": "default",
  "event_category_override": null,
  "filters": [
    {
      "query": "not event.type : \"end\"",
      "exists": false
    }
  ],
  "index": [
    "logs-endpoint.events.*"
  ],
  "tiebreaker_field": null,
  "timestamp_field": null
}